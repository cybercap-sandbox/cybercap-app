generator client {
    provider      = "prisma-client-js"
    // engineType    = "binary" // uncomment for docker deployment on Alpine 3.17 https://github.com/t3-oss/create-t3-app/issues/975
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x", "linux-musl-openssl-3.0.x", "rhel-openssl-1.0.x"]
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String?
    access_token      String?
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String?
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    expires_in        Int?
    ext_expires_in    Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id                     String                   @id @default(cuid())
    name                   String?
    email                  String?                  @unique
    emailVerified          DateTime?
    image                  String?
    interfaceLanguage      String?
    accounts               Account[]
    sessions               Session[]
    ImageGenerationRequest ImageGenerationRequest[]
    ChatSession            ChatSession[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model OpenAIModels {
    name                        String        @id
    availableForChat            Boolean
    availableForEmbeddings      Boolean
    availableForAudioTranscript Boolean
    availableForFineTuningJobs  Boolean
    availableForFineTunes       Boolean
    description                 String?
    maxTokens                   Int?
    TrainingDataDate            DateTime?
    deprecated                  Boolean?
    userId                      String?
    Message                     ChatMessage[]
}

model ImageGenerationRequest {
    id              String            @id @default(cuid())
    createdAt       DateTime          @default(now())
    requestText     String
    numberOfImages  Int
    generatedImages GeneratedImages[]
    User            User?             @relation(fields: [userId], references: [id])
    userId          String?
    imageSize       String?
}

model GeneratedImages {
    id                       String                  @id @default(cuid())
    createdAt                DateTime                @default(now())
    imageUrl                 String
    ImageGenerationRequest   ImageGenerationRequest? @relation(fields: [imageGenerationRequestId], references: [id])
    imageGenerationRequestId String?
}

model ChatMessage {
    id        String        @id @default(cuid())
    createdAt DateTime      @default(now())
    content   String
    role      role
    session   ChatSession   @relation(fields: [sessionId], references: [id], onDelete: Cascade)
    model     OpenAIModels? @relation(fields: [modelName], references: [name])
    modelName String?
    sessionId String
}

model ChatSession {
    id        String        @id @default(cuid())
    name      String?
    createdAt DateTime      @default(now())
    updatedAt DateTime      @updatedAt
    user      User          @relation(fields: [userId], references: [id], onDelete: Cascade)
    userId    String
    messages  ChatMessage[]
}

enum role {
    user
    assistant
    system
    function
}
